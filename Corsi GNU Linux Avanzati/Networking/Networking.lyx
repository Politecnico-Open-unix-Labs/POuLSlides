#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Madrid}
% \usecolortheme{crane}
% Decommentate se la volete GIALLA
% http://www.hartwork.org/beamer-theme-matrix/ per esempi di temi e colori

\usenavigationsymbolstemplate{}

\AtBeginSection[] { \begin{frame}<beamer> \frametitle{Sezione \thesection} \tableofcontents[currentsection] \end{frame} }

\setbeamertemplate{footline}
{
  \leavevmode%
  \hbox{%
  \begin{beamercolorbox}[wd=.333333\paperwidth,ht=2.25ex,dp=1ex,center]{author in head/foot}%
    \usebeamerfont{author in head/foot}\insertshortauthor%~~\beamer@ifempty{\insertshortinstitute}{}{(\insertshortinstitute)}
  \end{beamercolorbox}%
  \begin{beamercolorbox}[wd=.333333\paperwidth,ht=2.25ex,dp=1ex,center]{title in head/foot}%
    \usebeamerfont{title in head/foot}\insertshorttitle
  \end{beamercolorbox}%
  \begin{beamercolorbox}[wd=.333333\paperwidth,ht=2.25ex,dp=1ex,right]{date in head/foot}%
    \usebeamerfont{date in head/foot}\insertshortdate{}\hspace*{2em}
    \insertframenumber{} / \inserttotalframenumber\hspace*{2ex} 
  \end{beamercolorbox}}%
  \vskip0pt%
}

% set fonts for nicer pdf view
\IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}

\setbeamercovered{transparent}
% or whatever (possibly just delete it)

\titlegraphic{\includegraphics[height=2cm]{poul-logo.pdf}}
% Ricordate che dovete sempre avere il logo in pdf nella cartella dove avete il documento
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Andate in Documento -> Impostazioni -> Preambolo di LaTeX per dare un occhio
 ad alcune opzioni
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Title screen
\end_layout

\begin_layout Title
Networking e firewalling su GNU/Linux
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Networking e Firewalling su GNU/Linux
\end_layout

\end_inset


\end_layout

\begin_layout Author
\begin_inset Note Note
status open

\begin_layout Plain Layout
Daniele Iamartino
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

otacon22 - at - poul.org
\end_layout

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Date
Corsi GNU/Linux avanzati 2014 - Amministrazione di sistema
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Corsi GNU/Linux avanzati
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Prima di iniziare
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Prima di iniziare...
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Se vi può interessare, esiste un ambiente di emulazione di reti (utilizza
 macchine virtuali basate su 
\emph on
user mode linux
\emph default
), chiamato 
\series bold
NetKit
\end_layout

\begin_layout Itemize
Non è aggiornatissimo ma può essere 
\series bold
utile a scopo 
\begin_inset Quotes eld
\end_inset

didattico
\begin_inset Quotes erd
\end_inset


\series default
 per capire alcuni argomenti e fare qualche esperimento 
\begin_inset Quotes eld
\end_inset

vero
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Per installarlo basta che 
\series bold
seguite le istruzioni sul sito
\series default
, scaricate i tre archivi e li estraete con i comandi dati dati da loro
 (assicuratevi di estrarre come files sparsi)
\end_layout

\end_deeper
\begin_layout Section
Configurazione e diagnostica
\end_layout

\begin_layout Subsection
Layer fisico
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Verifica link e negoziazione Ethernet
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Quasi tutte le schede Ethernet ci permettono di essere interrogate via software
 per avere alcune utili informazioni sul livello fisico:
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Se c'è il 
\series bold
link
\series default
 (cioè se il cavo Ethernet è collegato alla scheda e a qualche altro apparato),
 se arriva segnale sul cavo.
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Quali sono le 
\series bold
capacità
\series default
 della scheda in termini di velocità (10, 100 o 1000 
\series bold
Mbps
\series default
 tipicamente)
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Quali sono le capacità del 
\begin_inset Quotes eld
\end_inset


\series bold
\emph on
link
\series default
 
\series bold
partner
\series default

\begin_inset Quotes erd
\end_inset


\emph default
 (tipicamente lo switch a cui è collegato il nostro server)
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Se 
\series bold
l'
\emph on
autonegoziazione
\series default

\begin_inset Foot
status open

\begin_layout Plain Layout
Subito dopo aver collegato il cavo alla scheda e aver ricevuto il link,
 la scheda tenta di inviare una serie di frame di varie dimensioni per capire
 quali sono le velocità supportate dal partner.
\end_layout

\end_inset


\emph default
 ha funzionato o no
\begin_inset Foot
status open

\begin_layout Plain Layout
Problemi di negoziazione possono causare 
\series bold
gravi 
\series default
problemi di performance della scheda di rete
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
mii-tool
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\emph on
mii-tool 
\emph default
è un comodo tool per verificare queste informazioni
\begin_inset Foot
status open

\begin_layout Plain Layout
Esiste anche 
\size normal
ethtool in alternativa, che fa le stesse cose
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize

\emph on
\begin_inset Quotes eld
\end_inset

mii-tool eth0
\begin_inset Quotes erd
\end_inset

 
\emph default
ci mostra informazioni di base sullo 
\series bold
stato della scheda
\series default
:
\end_layout

\begin_layout LyX-Code

\size tiny
eth0: negotiated 1000baseTx-FD flow-control, link ok
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset


\emph on
mii-tool eth0 -v
\emph default

\begin_inset Quotes erd
\end_inset

 ci dà qualche informazione più 
\series bold
dettagliata
\series default
 anche sullo stato del 
\series bold
partner
\series default
 e le 
\series bold
capacità
\series default
 della nostra scheda:
\end_layout

\begin_layout LyX-Code

\size tiny
eth0: negotiated 1000baseTx-FD flow-control, link ok
\end_layout

\begin_layout LyX-Code

\size tiny
  product info: vendor 00:08:18, model 54 rev 6
\end_layout

\begin_layout LyX-Code

\size tiny
  basic mode:autonegotiation enabled
\end_layout

\begin_layout LyX-Code

\size tiny
  basic status: autonegotiation complete, link ok
\end_layout

\begin_layout LyX-Code

\size tiny
  capabilities: 1000baseT-FD 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD
\end_layout

\begin_layout LyX-Code

\size tiny
  advertising:  1000baseT-FD 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD
 flow-control
\end_layout

\begin_layout LyX-Code

\size tiny
  link partner: 1000baseT-FD 100baseTx-FD 100baseTx-HD 10baseT-FD 10baseT-HD
 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Nel caso in cui la negoziazione fallisca possiamo anche 
\series bold

\begin_inset Quotes eld
\end_inset

forzare
\begin_inset Quotes erd
\end_inset

 la scheda
\series default
 ad utilizzare una certa modalità
\begin_inset Foot
status open

\begin_layout Plain Layout
A patto di 
\begin_inset Quotes eld
\end_inset

forzarlo
\begin_inset Quotes erd
\end_inset

 anche sul partner! Altrimenti vi troverete in un mare di guai
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size tiny
mii-tool --force=100baseTx-FD eth0
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
mii-tool
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Ricordiamoci che una scheda ethernet potrebbe risultare senza link anche
 se il cavo è collegato perché deve essere prima 
\begin_inset Quotes eld
\end_inset

accesa
\begin_inset Quotes erd
\end_inset

 via software.
 Vediamo ora come.
\end_layout

\end_deeper
\begin_layout Subsection
Layer datalink
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ip: Un tool per dominarli tutti
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Il networking su Linux è basato sulle 
\emph on
interfacce
\emph default
 di rete, come abbiamo visto.
 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Le interfacce sono dei punti di contatto con il resto del mondo e possono
 essere di vario tipo:
\end_layout

\begin_deeper
\begin_layout Itemize
Interfacce 
\series bold
fisiche
\series default
 (schede ethernet o wifi)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Endpoint di canali 
\series bold
virtuali
\series default
 (Tunnel o VPN)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Una 
\series bold
unione
\series default
 virtuale di due o più interfacce (bridge)
\end_layout

\begin_layout Itemize
...
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ip: Un tool per dominarli tutti
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
In passato, tools sparsi e vecchi: ifconfig, route, netstat, ...
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Un unico nuovo comando per operare a livello datalink e network: 
\series bold
ip
\series default
.
\end_layout

\begin_deeper
\begin_layout Itemize
Il tool 
\begin_inset Quotes eld
\end_inset

ip
\begin_inset Quotes erd
\end_inset

 fa parte del pacchetto 
\emph on
iproute2 
\emph default
che dovrebbe essere preinstallato su tutte le distribuzioni Linux.
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Itemize
I comandi della suite 
\emph on
ip
\emph default
 hanno tutti la stessa struttura:
\end_layout

\begin_deeper
\begin_layout LyX-Code
ip [options] object command
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Layer datalink
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ip: datalink layer
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Vedere le 
\series bold
informazioni
\series default
 a livello datalink delle interfacce, come ad esempio il MAC address e se
 risulta 
\begin_inset Quotes eld
\end_inset

up
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip link show
\end_layout

\begin_layout LyX-Code

\size scriptsize
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue state UNKNOWN
\end_layout

\begin_layout LyX-Code

\size scriptsize
     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 
\end_layout

\begin_layout LyX-Code

\size scriptsize
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state
 UP
\end_layout

\begin_layout LyX-Code

\size scriptsize
     qlen 1000 link/ether 00:de:ad:be:ef:ca brd ff:ff:ff:ff:ff:ff 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ip: datalink layer
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Possiamo cambiare lo stato di una interfaccia e 
\series bold
attivarla
\series default
 o disattivarla.
 
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip link set dev eth0 up
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip link set dev eth1 down
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Possiamo cambiare il 
\series bold
MAC address
\begin_inset Foot
status open

\begin_layout Plain Layout
Il MAC address è salvato all'interno di ciascuna scheda di rete per identificarl
e in modo univoco, tuttavia il sistema operativo è in grado di dire alla
 scheda di modificarlo (a parte rare schede che non lo permettono).
\end_layout

\end_inset


\series default
 o altri parametri datalink dell'interfaccia:
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip link set dev eth0 address XX:XX:XX:XX:XX:XX
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ip: ARP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Possiamo abilitare o disabiliare ARP se dovesse servire (e se sappiamo quello
 che stiamo facendo!)
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip link set dev eth0 arp off
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip link set dev eth0 arp on
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Possiamo visualizzare la 
\series bold
tabella ARP
\series default
:
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip neigh show 
\end_layout

\begin_layout LyX-Code

\size scriptsize
10.99.0.254 dev eth0 lladdr 00:11:22:33:44:55 REACHABLE
\end_layout

\end_deeper
\begin_layout Subsection
Layer Network (Internet)
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ip: Indirizzi IP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Una volta che abbiamo una interfaccia funzionante, possiamo 
\series bold
assegnare uno o più indirizzi IP
\series default

\begin_inset Foot
status open

\begin_layout Plain Layout
Possiamo assegnare un numero arbitrario di indirizzi IP ad ogni interfaccia
 di rete senza problemi.
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip address add 192.168.0.2/24 dev eth0
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip address add 1234:40ac:1:8d6b::1/64 dev eth0
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Il formato utilizzato per indicare gli indirizzi IP è 
\series bold
VLSM
\series default
 (Variable-length subnet masking).
 Indichiamo quindi sempre la lunghezza della netmask.
 L'indirizzamento a classi IP (Classe A,B,C....) è 
\bar under
deprecato
\bar default
 e non viene più utilizzato dal 1993.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Rimuovere indirizzi:
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip address del 192.168.0.2/24 dev eth0
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip address flush dev eth0
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ip: Indirizzi IP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Vedere gli indirizzi assegnati:
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip address show
\end_layout

\begin_layout LyX-Code

\size scriptsize
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue state UNKNOWN
\end_layout

\begin_layout LyX-Code

\size scriptsize
     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
\end_layout

\begin_layout LyX-Code

\size scriptsize
    inet 127.0.0.1/8 scope host lo
\end_layout

\begin_layout LyX-Code

\size scriptsize
    inet6 ::1/128 scope host
\end_layout

\begin_layout LyX-Code

\size scriptsize
        valid_lft forever preferred_lft forever 
\end_layout

\begin_layout LyX-Code

\size scriptsize
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state
 UP qlen 1000
\end_layout

\begin_layout LyX-Code

\size scriptsize
    link/ether 00:de:ad:be:ef:ca brd ff:ff:ff:ff:ff:ff
\end_layout

\begin_layout LyX-Code

\size scriptsize
    inet 192.168.0.2/24 brd 192.168.0.255 scope global eth0
\end_layout

\begin_layout LyX-Code

\size scriptsize
    inet6 1234:40ac:1:8d6b::1/64 scope global
\end_layout

\begin_layout LyX-Code

\size scriptsize
        valid_lft forever preferred_lft forever
\end_layout

\begin_layout LyX-Code

\size scriptsize
    inet6 fe80::219:d1ff:aeae:42af/64 scope link
\end_layout

\begin_layout LyX-Code

\size scriptsize
        valid_lft forever preferred_lft forever 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Ripasso netmask
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Brutalizzando: per distinguere gli indirizzi IP li suddividiamo in vari
 gruppi chiamati 
\emph on
subnets
\emph default
.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Una subnet viene identificata da un IP che gli appartiene e la sua maschera
\end_layout

\begin_deeper
\begin_layout Itemize
IP: 192.168.0.2 
\end_layout

\begin_layout Itemize
Netmask: 255.255.255.0 = 11111111.11111111.11111111.00000000 (= /24)
\end_layout

\end_deeper
\begin_layout Itemize
Conoscendo la subnet possiamo calcolare l'intervallo di indirizzi validi
\end_layout

\begin_layout Itemize
Nel dubbio esiste un comodo tool
\begin_inset Foot
status open

\begin_layout Plain Layout
purtroppo non preinstallato
\end_layout

\end_inset

, 
\series bold
ipcalc
\series default
 che ci permette di fare i conti:
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ipcalc 192.168.0.2/24
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ip: Route
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Possiamo visualizzare le rotte configurate dal sistema
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip route show
\end_layout

\begin_layout LyX-Code

\size scriptsize
default via 192.168.0.254 dev eth0  
\end_layout

\begin_layout LyX-Code

\size scriptsize
192.168.0.0/24 dev eth0  proto kernel  scope link  src 192.168.0.2  metric 2
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
E aggiungerne/rimuoverne
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip route add 1.2.3.0/24 via 192.168.0.254 dev eth0
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip route del 1.2.3.4 via 192.168.0.254 dev eth0
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Per poter 
\begin_inset Quotes eld
\end_inset

collegarci
\begin_inset Quotes erd
\end_inset

 ad Internet dobbiamo avere una route di default, delegata ad un gateway
 presente sulla nostra rete locale.
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ip route add default via 192.168.0.254 dev eth0
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
dhclient
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Nel caso in cui non vogliamo assegnare un indirizzo statico, possiamo utilizzare
 un client DHCP come ad esempio 
\series bold
\emph on
dhclient
\series default
\emph default
, per ottenere un indirizzo dal server DHCP sulla rete locale (solitamente
 installato sul gateway di default).
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ dhclient eth0
\end_layout

\begin_layout LyX-Code

\size scriptsize
Internet Systems Consortium DHCP Client V3.1.1
\end_layout

\begin_layout LyX-Code

\size scriptsize
Copyright 2004-2008 Internet Systems Consortium.
\end_layout

\begin_layout LyX-Code

\size scriptsize
All rights reserved.
 For info, please visit http://www.isc.org/sw/dhcp/
\end_layout

\begin_layout LyX-Code

\size scriptsize
Listening on LPF/eth0/6e:5f:98:37:0c:07 
\end_layout

\begin_layout LyX-Code

\size scriptsize
Sending on   LPF/eth0/6e:5f:98:37:0c:07
\end_layout

\begin_layout LyX-Code

\size scriptsize
Sending on   Socket/fallback
\end_layout

\begin_layout LyX-Code

\size scriptsize
DHCPDISCOVER on eth0 to 255.255.255.255 port 67 interval 4
\end_layout

\begin_layout LyX-Code

\size scriptsize
DHCPOFFER from 10.5.5.1
\end_layout

\begin_layout LyX-Code

\size scriptsize
DHCPREQUEST on eth0 to 255.255.255.255 port 67
\end_layout

\begin_layout LyX-Code

\size scriptsize
DHCPACK from 10.5.5.1
\end_layout

\begin_layout LyX-Code

\size scriptsize
bound to 10.5.5.26 -- renewal in 297 seconds.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Configurazione su Debian/Ubuntu
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Su Debian e Ubuntu possiamo impostare le interfacce di rete in modo permanente
 tramite il file 
\emph on
/etc/network/interfaces
\emph default
, che verrà letto e utilizzato all'avvio del sistema per configurare le
 interfacce.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
# The loopback network interface
\end_layout

\begin_layout LyX-Code

\size scriptsize
auto lo 
\end_layout

\begin_layout LyX-Code

\size scriptsize
iface lo inet loopback
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
auto eth0 
\end_layout

\begin_layout LyX-Code

\size scriptsize
iface eth0 inet static
\end_layout

\begin_layout LyX-Code

\size scriptsize
	address 192.168.0.2
\end_layout

\begin_layout LyX-Code

\size scriptsize
	netmask 255.255.255.0
\end_layout

\begin_layout LyX-Code

\size scriptsize
	network 192.168.0.0
\end_layout

\begin_layout LyX-Code

\size scriptsize
	broadcast 192.168.0.255
\end_layout

\begin_layout LyX-Code

\size scriptsize
	gateway 192.168.0.254
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Se utilizziamo DHCP è più semplicemente:
\end_layout

\begin_layout LyX-Code

\size scriptsize
# The loopback network interface
\end_layout

\begin_layout LyX-Code

\size scriptsize
auto lo
\end_layout

\begin_layout LyX-Code

\size scriptsize
iface lo inet loopback
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
auto eth0
\end_layout

\begin_layout LyX-Code

\size scriptsize
iface eth0 inet dhcp
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout Subsection
Livello applicativo
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
DNS
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Nel caso in cui 
\series bold
configuriamo la rete manualmente
\series default
, senza utilizzare un client DHCP; al fine di poter risolvere i nomi DNS
 dobbiamo 
\series bold
impostare un server DNS
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Su Linux, tutte le applicazioni che devono risolvere nomi consultano il
 file /etc/nsswitch.conf, che a sua volta indica di consultare:
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
/etc/hosts
\emph default
 : Dove sono presenti eventuali assegnamenti statici di nomi che possiamo
 configurare manualmente
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
/etc/resolv.conf
\emph default
 : Dove sono presenti gli indirizzi IP dei server DNS da consultare, nel
 formato che segue:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\size scriptsize
nameserver 208.67.222.222
\end_layout

\begin_layout LyX-Code

\size scriptsize
nameserver 8.8.8.8
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ping
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Per diagnostica di rete si utilizza solitamente il comando ping 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ ping 192.168.0.1
\end_layout

\begin_layout LyX-Code

\size scriptsize
PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.
\end_layout

\begin_layout LyX-Code

\size scriptsize
64 bytes from 192.168.0.1: icmp_req=1 ttl=64 time=1.04 ms
\end_layout

\begin_layout LyX-Code

\size scriptsize
64 bytes from 192.168.0.1: icmp_req=2 ttl=64 time=1.22 ms
\end_layout

\begin_layout LyX-Code

\size scriptsize
64 bytes from 192.168.0.1: icmp_req=3 ttl=64 time=1.13 ms
\end_layout

\begin_layout LyX-Code

\size scriptsize
64 bytes from 192.168.0.1: icmp_req=4 ttl=64 time=1.14 ms
\end_layout

\begin_layout LyX-Code

\size scriptsize
64 bytes from 192.168.0.1: icmp_req=5 ttl=64 time=1.49 ms
\end_layout

\begin_layout LyX-Code

\size scriptsize
^C
\end_layout

\begin_layout LyX-Code

\size scriptsize
--- 192.168.0.1 ping statistics ---
\end_layout

\begin_layout LyX-Code

\size scriptsize
5 packets transmitted, 5 received, 0% packet loss, time 4003ms
\end_layout

\begin_layout LyX-Code

\size scriptsize
rtt min/avg/max/mdev = 1.047/1.211/1.499/0.158 ms
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Buona pratica per il debugging di rete è di fare un ping a:
\end_layout

\begin_deeper
\begin_layout Itemize
Localhost
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Il gateway di default della rete locale o un'altra macchina della rete locale
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Un host esterno alla rete locale
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
host
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Possiamo controllare la risoluzione dei nomi DNS utilizzando il comando
 
\begin_inset Quotes eld
\end_inset

host
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ host poul.org
\end_layout

\begin_layout LyX-Code

\size scriptsize
poul.org has address 91.121.182.81
\end_layout

\begin_layout LyX-Code

\size scriptsize
poul.org has IPv6 address 2001:41d0:1:f751::1
\end_layout

\begin_layout LyX-Code

\size scriptsize
poul.org mail is handled by 1 poul.org.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ host -t MX poul.org
\end_layout

\begin_layout LyX-Code

\size scriptsize
poul.org mail is handled by 1 poul.org.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ host 91.121.182.81
\end_layout

\begin_layout LyX-Code

\size scriptsize
81.182.121.91.in-addr.arpa domain name pointer poul.org.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
NetCat
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Uno dei tool principali per fare scripting di rete e debugging è netcat.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Netcat è molto semplicemente un client/server tcp/udp da linea di comando.
 Una sorta di 
\begin_inset Quotes eld
\end_inset

telnet client
\begin_inset Quotes erd
\end_inset

 avanzato.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ nc [hostname] [port]
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ nc -l -p [port] 
\begin_inset Foot
status open

\begin_layout Plain Layout

\size scriptsize
In altre versioni di netcat non è necessaria l'opzione -p
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
-l -p [porta]
\emph default
 per restare in ascolto per connessioni sulla porta data
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
-u
\emph default
 per indicare l'utilizzo di UDP invece di TCP
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
-v
\emph default
 per avere informazioni aggiuntive durante la connessione
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ss: connessioni del sistema
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Può tornare utile avere una lista di tutte le connessioni attive e dei programmi
 associati a ciascuna connessione.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Una 
\begin_inset Quotes eld
\end_inset


\emph on
connessione
\emph default

\begin_inset Quotes erd
\end_inset

 è una quintupla composta tipicamente da: 
\emph on
(ip sorgente, ip destinazione, porta sorgente, porta destinazione, protocollo).
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Il comando 
\begin_inset Quotes eld
\end_inset


\emph on
ss
\emph default

\begin_inset Quotes erd
\end_inset

 ci permette di ottenere un po' di informazioni.
 In realtà possiamo anche utilizzare alcune opzioni di 
\emph on
lsof 
\emph default
come abbiamo già visto in precedenti lezioni.
 (Nota: dobbiamo utilizzare 
\begin_inset Quotes eld
\end_inset

ss
\begin_inset Quotes erd
\end_inset

 da 
\series bold
root
\series default
 per poter vedere i processi associati alle connessioni)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ss: connessioni del sistema
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code

\size tiny
$ ss -ap
\end_layout

\begin_layout LyX-Code

\size tiny
State       Recv-Q Send-Q   Local Address:Port     Peer Address:Port  
\end_layout

\begin_layout LyX-Code

\size tiny
LISTEN      0      50           127.0.0.1:mysql               *:*        users:(("m
ysqld",6218,11))
\end_layout

\begin_layout LyX-Code

\size tiny
LISTEN      0      128                 :::http               :::*      
  users:(("nginx",31628,19),("nginx",19952,19))
\end_layout

\begin_layout LyX-Code

\size tiny
LISTEN      0      128                  *:http                *:*      
  users:(("nginx",31628,18),("nginx",19952,18))
\end_layout

\begin_layout LyX-Code

\size tiny
LISTEN      0      32                   *:ftp                 *:*      
  users:(("vsftpd",4941,3))
\end_layout

\begin_layout LyX-Code

\size tiny
LISTEN      0      128                 :::ssh                :::*      
  users:(("sshd",5990,4))
\end_layout

\begin_layout LyX-Code

\size tiny
LISTEN      0      128                  *:ssh                 *:*      
  users:(("sshd",5990,3))
\end_layout

\begin_layout LyX-Code

\size tiny
ESTAB       0      0             10.0.0.1:56345        10.0.0.2:37597    users:(("pyth
on",29970,14))
\end_layout

\begin_layout LyX-Code

\size tiny
ESTAB       0      0        91.121.182.81:ssh           1.2.3.4:1933     users:(("sshd
",19373,3),("sshd",19371,3)) 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Netstat
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In alternativa ad 
\begin_inset Quotes eld
\end_inset

ss
\begin_inset Quotes erd
\end_inset

 c'è il più datato 
\begin_inset Quotes eld
\end_inset

netstat
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code

\size tiny
$ netstat -untap
\end_layout

\begin_layout LyX-Code

\size tiny
Active Internet connections (servers and established)
\end_layout

\begin_layout LyX-Code

\size tiny
Proto Recv-Q Send-Q Local Address           Foreign Address         State
       PID/Program name
\end_layout

\begin_layout LyX-Code

\size tiny
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN   
   6218/mysqld
\end_layout

\begin_layout LyX-Code

\size tiny
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN   
   19952/nginx 
\end_layout

\begin_layout LyX-Code

\size tiny
tcp        0      0 0.0.0.0:21              0.0.0.0:*               LISTEN   
   4941/vsftpd    
\end_layout

\begin_layout LyX-Code

\size tiny
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN   
   5990/sshd    
\end_layout

\begin_layout LyX-Code

\size tiny
tcp        0      0 10.0.0.1:56345          0.0.0.0:*               LISTEN   
   29970/python  
\end_layout

\begin_layout LyX-Code

\size tiny
tcp        0     48 91.121.182.81:22        1.2.3.4:1933            ESTABLISHED
 19371/sshd: otacon 
\end_layout

\begin_layout LyX-Code

\size tiny
tcp6       0      0 :::80                   :::*                    LISTEN
      19952/nginx    
\end_layout

\begin_layout LyX-Code

\size tiny
tcp6       0      0 :::22                   :::*                    LISTEN
      5990/sshd      
\end_layout

\begin_layout LyX-Code

\size tiny
tcp6       0      0 :::443                  :::*                    LISTEN
      19952/nginx   
\end_layout

\begin_layout LyX-Code

\size tiny
udp        0      0 0.0.0.0:5060            0.0.0.0:*                        
   8460/asterisk 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Banda per connessione
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Altri tool utili per vedere la quantità di banda (byte/s) utilizzati da
 ogni connessione:
\end_layout

\begin_layout Itemize

\emph on
iftop -i eth0
\end_layout

\begin_layout Itemize

\emph on
nethogs eth0
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Misurazione banda
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Un comodo tool per verificare la velocità massima raggiungibile da una connessio
ne TCP (e quindi tipicamente dalla linea sottostante) è 
\series bold
\emph on
iperf
\series default
\emph default
.
 Non è preinstallato.
\end_layout

\begin_deeper
\begin_layout Itemize
Sul client eseguiamo:
\end_layout

\begin_layout LyX-Code
$ iperf -c [iperf server hostname] -p [porta]
\end_layout

\begin_layout Itemize
Sul server eseguiamo:
\end_layout

\begin_layout LyX-Code
$ iperf -s -p [porta]
\end_layout

\end_deeper
\begin_layout Itemize
Per misure accurate per i valori di latenza e jitter è consigliabile usare
 la modalità UDP (
\begin_inset Quotes eld
\end_inset


\emph on
-u
\emph default

\begin_inset Quotes erd
\end_inset

).
\end_layout

\end_deeper
\begin_layout Subsection
Analisi del traffico
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
tcpdump
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Per vedere il traffico in transito su una interfaccia possiamo utilizzare
 tcpdump
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
tcpdump -i [interfaccia] -n 
\end_layout

\begin_deeper
\begin_layout Itemize
Ci permette di vedere il traffico sulla interfaccia specificata, senza risolvere
 i 
\emph on
reverse-DNS
\emph default
 degli indirizzi che vediamo (spreca tempo e banda).
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
tcpdump -i [interfaccia] -n -w file.pcap
\end_layout

\begin_deeper
\begin_layout Itemize
Salva un dump di tutto il traffico nel file specificato 
\begin_inset Quotes eld
\end_inset


\emph on
file.pcap
\emph default

\begin_inset Quotes erd
\end_inset

, per una analisi successiva
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
tcpdump
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code

\size scriptsize
$ sudo tcpdump -i eth0 -n
\end_layout

\begin_layout LyX-Code

\size scriptsize
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
\end_layout

\begin_layout LyX-Code

\size scriptsize
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
\end_layout

\begin_layout LyX-Code

\size scriptsize
15:39:04.224983 IP 192.168.0.81.57828 > 157.56.127.36.443: 
\end_layout

\begin_layout LyX-Code

\size scriptsize
     Flags [P.], seq 1901073964:1901074005, ack 2664128571, win 41856,
\end_layout

\begin_layout LyX-Code

\size scriptsize
     options [nop,nop,TS val 15115199 ecr 79213980], length 41 
\end_layout

\begin_layout LyX-Code

\size scriptsize
15:39:04.265743 IP 157.56.127.36.443 > 192.168.0.81.57828:
\end_layout

\begin_layout LyX-Code

\size scriptsize
     Flags [P.], seq 1:89, ack 41, win 64935, 
\end_layout

\begin_layout LyX-Code

\size scriptsize
     options [nop,nop,TS val 79235515 ecr 15115199], length 88 
\end_layout

\begin_layout LyX-Code

\size scriptsize
15:39:04.265785 IP 192.168.0.81.57828 > 117.56.117.36.443: 
\end_layout

\begin_layout LyX-Code

\size scriptsize
     Flags [.], ack 89, win 41856, options [nop,nop,TS val 15115209 ecr 79235515]
,length 0
\end_layout

\begin_layout LyX-Code

\size scriptsize
15:39:04.656254 IP 82.140.3.129.7000 > 102.168.0.81.37336: 
\end_layout

\begin_layout LyX-Code

\size scriptsize
     Flags [P.], seq 3133130585:3133130723, ack 3995030141, win 2312,
\end_layout

\begin_layout LyX-Code

\size scriptsize
     options [nop,nop,TS val 3490043 ecr 15114909], length 138 
\end_layout

\begin_layout LyX-Code

\size scriptsize
15:39:04.656321 IP 102.168.0.81.37336 > 83.240.3.129.7000:
\end_layout

\begin_layout LyX-Code

\size scriptsize
     Flags [.], ack 138, win 540, options [nop,nop,TS val 15115306 ecr 3490043],
 length 0 
\end_layout

\begin_layout LyX-Code

\size scriptsize
^C
\end_layout

\begin_layout LyX-Code

\size scriptsize
5 packets captured
\end_layout

\begin_layout LyX-Code

\size scriptsize
5 packets received by filter
\end_layout

\begin_layout LyX-Code

\size scriptsize
0 packets dropped by kernel 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
tcpdump e sintassi BPF
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Possiamo utilizzare la sintassi BPF all'interno di tcpdump per specificare
 quali pacchetti vogliamo vedere del traffico
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
tcpdump -i eth0 -n 
\begin_inset Quotes eld
\end_inset

icmp
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Vediamo solo i pacchetti icmp (ping/traceroute/...)
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\emph on
tcpdump -i eth0 -n 
\begin_inset Quotes eld
\end_inset

arp
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Vediamo solo richieste e risposte ARP
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\emph on
tcpdump -i eth0 -n 
\begin_inset Quotes eld
\end_inset

tcp and src or dst 192.168.0.1
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Vediamo tutti i pacchetti TCP con sorgente o destinazione 192.168.0.1
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize

\emph on
tcpdump -i eth0 -n 
\begin_inset Quotes eld
\end_inset

tcp port 22
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Vediamo tutti i pacchetti TCP con porta sorgente o destinazione 22.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Amministrazione remota
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
SSH
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
ssh [opzioni] username@hostname
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
-i /path/chiave
\emph default
 :
\emph on
 
\emph default
Per l'autenticazione tramite chiave pubblica
\begin_inset Foot
status open

\begin_layout Plain Layout
Possiamo generare chiavi utilizzando 
\emph on
ssh-keygen
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
-o PubkeyAuthentication=no
\emph default
 :
\emph on
 
\emph default
Per forzare il login mediante password
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
-l user 
\emph default
: Modo alternativo per indicare l'utente da utilizzare per il login
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
-p
\emph default
 
\emph on
[porta]
\emph default
 : Indica una porta (diversa dalla 22) da utilizzare per la connessione.
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Firewalling
\end_layout

\begin_layout Subsection
Concetti fondamentali
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Routing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Prima di parlare di firewalling vediamo il routing.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Ogni host GNU/Linux è anche un router.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Per abilitare il 
\begin_inset Quotes eld
\end_inset

forwarding
\begin_inset Quotes erd
\end_inset

 di pacchetti ip dobbiamo abilitarlo con
\end_layout

\begin_layout LyX-Code
echo 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 > /proc/sys/net/ipv4/ip_forward
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
In questo modo altri host potranno utilizzare noi come router (o gateway
 di default e noi provvedremo ad inoltrare il traffico in base alle nostre
 regole di routing.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Firewalling
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Un firewall è un 
\begin_inset Quotes eld
\end_inset

programma
\begin_inset Quotes erd
\end_inset

 che si occupa di decidere se accettare o meno i pacchetti in transito su
 un host.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Un firewall può essere utile:
\end_layout

\begin_deeper
\begin_layout Itemize
Su un router di frontiera per discriminare l'accesso ai servizi di una rete
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Su un server, per esporre solo determinati servizi sul singolo server
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Blocchiamo
\begin_inset Quotes erd
\end_inset

 certi tipi di pacchetti in transito, in base a certe regole.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Il firewall deve essere l'unico punto di contatto della rete con l'esterno
\begin_inset Foot
status open

\begin_layout Plain Layout
Per evitare il problema di generare 
\emph on
Single Point Of Failure
\emph default
 è eventualmente possibile utilizzare più firewall sincronizzati costantemente
 tra di loro: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://conntrack-tools.netfilter.org/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Firewalling
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
All'interno del kernel Linux è presente una parte del kernel dedicata esclusivam
ente a gestire le operazioni di firewalling, chiamata 
\series bold
\emph on
netfilter
\series default
\emph default
.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
In userspace possiamo utilizzare 
\series bold
iptables
\series default
/
\series bold
ip6tables
\series default
/
\series bold
ebtables 
\series default
come strumenti per comunicare al kernel le regole da applicare
\begin_inset Foot
status open

\begin_layout Plain Layout
A breve si migrerà ad un nuovo unico tool, chiamato 
\series bold
nftables
\series default
, che tuttavia non modifica la struttura delle tabelle e hooks che vedremo
 tra un attimo.
\end_layout

\end_inset

 a livello IP(v4 e v6) e (se necessario) Ethernet/datalink.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Netfilter è un firewall di tipo 
\series bold
\emph on
stateful
\series default
\emph default
, cioè permette di tenere traccia delle connessioni che lo attraversano
 e del loro stato.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Netfilter si occupa anche di implementare le operazioni di NAT e port forwarding
 spesso utilizzate.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Netfilter
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
L'infrastruttura di Netfilter è basata su 5 
\begin_inset Quotes eld
\end_inset

hooks
\begin_inset Quotes erd
\end_inset

 presenti nel percorso dei pacchetti.
 Sono 5 
\begin_inset Quotes eld
\end_inset

punti
\begin_inset Quotes erd
\end_inset

 dove i pacchetti devono per forza passare.
 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
In ognuno di questi 
\begin_inset Quotes eld
\end_inset

punti
\begin_inset Quotes erd
\end_inset

 è possibile:
\end_layout

\begin_deeper
\begin_layout Itemize
Permettere il passaggio del pacchetto (ACCEPT) 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Scartare il pacchetto e interromperlo (DROP) 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Redirigere il pacchetto
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Modificare alcuni campi del pacchetto (
\emph on
mangle
\emph default
)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Netfilter
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename diagramma.svg
	lyxscale 50
	height 80pheight%

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Hooks
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
PREROUTING
\series default
: pacchetti in ingresso
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\series bold
INPUT
\series default
: pacchetti destinati all'host stesso
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\series bold
FORWARD
\series default
: pacchetti non destinati all'host stesso, che dobbiamo inoltrare
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\series bold
OUTPUT
\series default
: pacchetti in uscita dall'host stesso
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\series bold
POSTROUTING
\series default
: pacchetti in uscita
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Netfilter
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Gli 
\begin_inset Quotes eld
\end_inset

hooks
\begin_inset Quotes erd
\end_inset

 non possono essere utilizzati direttamente.
 Non possiamo metterci delle regole dentro.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Le regole devono essere inserite in delle 
\series bold
tabelle
\series default
.
 Ogni tabella ha dei punti di aggancio agli hook: le chain.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Le tabelle utilizzate sono: 
\emph on
filter
\emph default
, 
\emph on
mangle
\emph default
, 
\emph on
nat 
\emph default
e 
\emph on
raw
\end_layout

\begin_deeper
\begin_layout Itemize
filter è la tabella con le regole principali
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
mangle è la tabella dove risiedono le regole che modificano i pacchetti
 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
nat è la tabella dove avvengono le operazioni che permettono il NAT
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
raw 
\emph default
(saltiamo...)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Netfilter
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Riassumendo: 
\end_layout

\begin_deeper
\begin_layout Itemize
il pacchetto segue il suo percorso
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
quando il pacchetto arriva in un hook si vanno a consultare le varie tabelle
 che hanno regole in quell'hook (le tabelle da verificare sono in un certo
 ordine)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
il pacchetto entra nella 
\emph on
chain
\emph default
 di una tabella e lì vengono consultate tutte le regole presenti
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
se al termine delle verifiche, la decisione è 
\begin_inset Quotes eld
\end_inset

ACCEPT
\begin_inset Quotes erd
\end_inset

, allora il pacchetto prosegue il suo percorso e viene verificato nelle
 tabelle successive
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
poi se il pacchetto prosegue ancora passerà nell'hook successivo
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
iptables
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Iniziamo a guardare la tabella di default, la tabella filter:
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ sudo iptables -nvL
\end_layout

\begin_layout LyX-Code

\size scriptsize
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
\end_layout

\begin_layout LyX-Code

\size scriptsize
pkts bytes target     prot opt in     out     source               destination
         
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
\end_layout

\begin_layout LyX-Code

\size scriptsize
pkts bytes target     prot opt in     out     source               destination
  
\end_layout

\begin_layout LyX-Code

\size scriptsize
      
\end_layout

\begin_layout LyX-Code

\size scriptsize
Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
\end_layout

\begin_layout LyX-Code

\size scriptsize
pkts bytes target     prot opt in     out     source               destination
     
\end_layout

\begin_layout LyX-Code
  
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
iptables
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Nella tabella filter abbiamo 3 chains che si agganciano agli hooks di 
\series bold
INPUT
\series default
, 
\series bold
FORWARD
\series default
 e 
\series bold
OUTPUT
\series default
.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Durante il percorso del pacchetto, quando si arriva nella chain della tabella,
 si analizzano una per una le regole presenti dalla prima all'ultima.
 Se nessuna regola fa 
\series bold
match
\series default
, si applica la 
\emph on
policy di default 
\emph default
della chain.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
La policy di default può essere ACCEPT o DROP.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
iptables
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Ogni 
\series bold
regola
\series default
 è costituta da due parti principali:
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
Match:
\emph default
 È la parte della regola che specifica quali sono le caratteristiche del
 pacchetto che cerchiamo
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
Target
\emph default
: È la parte della regola che specifica che operazione effettuare sul pacchetto
 che fa match
\end_layout

\end_deeper
\begin_layout Itemize
Solitamente si usa il minuscono per i nomi dei match e il maiuscolo per
 i TARGET.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
sintassi di iptables
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
iptables -A INPUT --source 192.168.0.153 -j DROP
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\series bold
-A
\series default
 significa che vogliamo aggiungere questa regola (in coda alle altre) nella
 
\bar under
chain 
\series bold
INPUT
\series default
\bar default
 (della tabella implicita filter)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\series bold
--source
\series default
 indica la condizione che il pacchetto IPv4 deve avere come sorgente l'indirizzo
 192.168.0.153
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\series bold
-j DROP
\series default
 specifica che se le precedenti condizioni di match sono soddisfatte, l'operazio
ne da effettuare è un 
\series bold
jump
\series default
 al target DROP, cioè 
\bar under
scartiamo il pacchetto
\bar default
.
\end_layout

\begin_deeper
\begin_layout Itemize
Il pacchetto viene scartato e 
\series bold
non
\series default
 proseguirà nelle altre regole.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
sintassi di iptables
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Nel match possiamo sempre utilizzare la negazione mettendo un punto esclamativo
 davanti ad una delle condizioni del match.
\end_layout

\begin_layout Itemize
Ad esempio:
\end_layout

\begin_deeper
\begin_layout LyX-Code
iptables -A INPUT -s 192.168.0.0/24 ! -i eth1 -j DROP
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\emph on
-s
\emph default
 è come 
\emph on
--source, 
\emph default
utilizzando la notazione VLSM 
\begin_inset Quotes eld
\end_inset

/24
\begin_inset Quotes erd
\end_inset

 specifichiamo il 
\series bold
prefisso
\series default
, non l'indirizzo esatto.
 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\series bold
-i
\series default
 specifica il match sull'interfaccia di arrivo del pacchetto
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
sintassi di iptables
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
iptables -A [CHAIN] [condizioni di match] -j [target]
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code
iptables -D [CHAIN] [condizioni di match] -j [target]
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code
iptables -I [CHAIN] [condizioni di match] -j [target]
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code
iptables -P [CHAIN] [ACCEPT|DROP]
\end_layout

\begin_deeper
\begin_layout Itemize
Policy di default della chain
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout LyX-Code
iptables -F [CHAIN] 
\end_layout

\begin_deeper
\begin_layout Itemize
Per fare un flush delle regole nella chain (senza cambiare la policy di
 default)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Cancellare una regola
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Possiamo riscriverla uguale mettendo -D al posto di -A
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Oppure possiamo elencare le regole con i numeri a fianco
\end_layout

\begin_layout LyX-Code
$ iptables -nvL --line-numbers
\end_layout

\begin_layout Itemize
...e cancellare in base al numero:
\end_layout

\begin_layout LyX-Code
$ iptables -t [table] -D [CHAIN] [numero regola]
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ACCEPT/DROP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Abbiamo visto che con DROP il pacchetto viene fermato.
\end_layout

\begin_layout Itemize
Cosa succede con ACCEPT ?
\end_layout

\begin_deeper
\begin_layout Itemize
Il pacchetto viene accettato e passa alla chain successiva.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Nel caso di INPUT non c'è una chain successiva, quindi viene passato al
 sistema operativo
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Però se siamo in PREROUTING ad esempio , non è detto che il pacchetto arrivi,
 potrebbe essere bloccato in INPUT.
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Match comuni
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Interfaccia di rete di 
\emph on
input
\emph default
/
\emph on
output
\emph default
 del pacchetto
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
\emph on
-i [iface]
\end_layout

\begin_layout Itemize

\series bold
\emph on
-o [iface]
\end_layout

\begin_layout Itemize
Non possiamo usarli sempre questi match.
 Ad esempio non ha senso usare -i nella chain di OUTPUT.
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Indirizzo sorgente/destinazione
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
\emph on
-s [address or network prefix]
\end_layout

\begin_layout Itemize

\series bold
\emph on
-d [address or network prefix]
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Protocollo di livello 4 e numeri di porta destinazione
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
\emph on
-p udp --dport 53
\end_layout

\begin_layout Itemize

\series bold
-p tcp --dport 22
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Match stateful
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Tutti i match che abbiamo visto fino ad ora sono 
\begin_inset Quotes eld
\end_inset

integrati
\begin_inset Quotes erd
\end_inset

 in netfilter.
 Molti altri match e quelli aggiuntivi necessitano quasi sempre di 
\begin_inset Quotes eld
\end_inset


\series bold
\emph on
-m nome_modulo_match
\series default
\emph default

\begin_inset Quotes erd
\end_inset

, per dire a iptables di caricare il modulo relativo.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Possiamo fare match sullo stato della connessione correlata al pacchetto
 utilizzando il modulo di tracking delle connessioni: 
\series bold
conntrack
\end_layout

\begin_layout LyX-Code

\size small
$ iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
\end_layout

\begin_layout Itemize
Questa regola dice se il pacchetto è aprte di una connnessione stabilita
 (3-way handshake tcp completato, o nel caso di UDP è già 
\begin_inset Quotes eld
\end_inset

passato qualcosa recentemente
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Target comuni
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
ACCEPT/DROP
\end_layout

\begin_layout Itemize
REJECT: Come DROP ma genera un messaggio di errore ICMP o TCP che viene
 rispedito al mittente
\end_layout

\begin_deeper
\begin_layout Itemize
Ad esempio:
\end_layout

\begin_layout LyX-Code
-j REJECT --reject-with tcp-reset
\end_layout

\end_deeper
\begin_layout Itemize
LOG: Salva una riga di log relativa al pacchetto che ha fatto match nei
 log di sistema (dmesg)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
RST o DROP?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Normalmente si preferisce non inviare nessun REJECT.
 Con il REJECT si spreca banda e si è leggermente vulnerabili ad attacchi
 DoS, oltre a rendere più facile il port scanning.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Blacklisting o whitelisting
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Vogliamo fare una festa.
 Facciamo la lista di tutti gli invitati o la lista di tutti i 'non invitati'
 ? 
\begin_inset Quotes eld
\end_inset

 (cit.)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Si fa sempre 
\emph on
whitelisting
\emph default
.
 Se state facendo blacklisting state sbagliando qualcosa.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Solitamente si impostano le policy di default di INPUT e FORWARD a DROP,
 e poi si inseriscono una serie di regole per fare whitelisting del traffico
 legittimo.
 Di solito si lascia OUTPUT in ACCEPT, non ha molto senso bloccare anche
 quello che generiamo noi.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Interfaccia di loopback
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
L'interfaccia di rete 
\begin_inset Quotes eld
\end_inset

lo
\begin_inset Quotes erd
\end_inset

 è quella associata all'indirizzo 127.0.0.1 e tutta la rete 127.0.0.0/8
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Molti programmi utilizzano questo indirizzamento per comunicazioni tra processi
 e altro.
 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\series bold
Non 
\series default
dobbiamo bloccare questo traffico locale.
\end_layout

\begin_layout LyX-Code
$ iptables -A INPUT -i lo -j ACCEPT
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ICMP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
ICMP è un protocollo di servizio che si occupa di trasmettere informazioni
 riguardanti malfunzionamenti, informazioni di controllo o messaggi tra
 i vari componenti di una rete.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Il tipo di pacchetto ICMP più famoso è senza dubbio la “echo request”, che
 viene inviata con il comando ping e serve a sapere se un certo host è attivo
 (e viene utilizzato per controllare se arrivano i pacchetti o ci sono problemi
 sulla rete) 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
A meno che non abbiate specifiche esigenze (ad esempio nascondere il fatto
 che il vostro host è acceso) 
\series bold
è considerata pratica scorretta oltre che “maleducazione” ignorare i messaggi
 ICMP
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Se volete essere gentili semplicemente accettate tutto:
\end_layout

\begin_layout LyX-Code
$ iptables -A INPUT -p icmp -j ACCEPT 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
ICMP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Se volete evitare di accettare propro tutto il traffico, almeno accettate
 i tipi di messaggio ICMP fondamentali:
\end_layout

\begin_layout LyX-Code

\size small
$ iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT
\end_layout

\begin_layout LyX-Code

\size small
$ iptables -A INPUT -p icmp --icmp-type 3 -j ACCEPT
\end_layout

\begin_layout LyX-Code

\size small
$ iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT
\end_layout

\begin_layout Itemize
Che corrispondono a:
\end_layout

\begin_deeper
\begin_layout Itemize
Echo request (type 8)
\end_layout

\begin_layout Itemize
Destination Unreachable (type 3) 
\end_layout

\begin_layout Itemize
Echo reply (type 0) 
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Esempio di config essenziale
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code

\size scriptsize
iptables -A INPUT -i lo -j ACCEPT
\end_layout

\begin_layout LyX-Code

\size scriptsize
iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
\end_layout

\begin_layout LyX-Code

\size scriptsize
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT
\end_layout

\begin_layout LyX-Code

\size scriptsize
iptables -A INPUT -p icmp --icmp-type 3 -j ACCEPT
\end_layout

\begin_layout LyX-Code

\size scriptsize
iptables -A INPUT -p icmp --icmp-type 0 -j ACCEPT
\end_layout

\begin_layout LyX-Code

\size scriptsize
iptables -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT
\end_layout

\begin_layout LyX-Code

\size scriptsize
iptables -A INPUT -p tcp --dport 80 -m conntrack --ctstate NEW -j ACCEPT
\end_layout

\begin_layout LyX-Code

\size scriptsize
iptables -P INPUT DROP
\end_layout

\begin_layout LyX-Code

\size scriptsize
iptables -P OUTPUT ACCEPT
\end_layout

\begin_layout LyX-Code

\size scriptsize
iptables -P FORWARD DROP   #Se non vogliamo fare da router a nessuno....
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Chiudersi fuori di casa
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Fate molta attenzione se state configurando una macchina remota (tipo via
 ssh) quando impostate le policy di default! 
\end_layout

\begin_layout Itemize
Caso tipico:
\end_layout

\begin_deeper
\begin_layout Itemize
“Oh cavolo, non ho impostato nessun firewall su questa macchina...
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
beh...
 per prima cosa policy di default DROP!” 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
“Perché non risponde più il server?” 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Tramite cosa stavate comunicando? (-.-') 
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Chiudersi fuori di casa
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Ricordatevi sempre di impostare le policy di default come ultimo passo,
 dopo esservi assicurati di aver messo una regola per accettare le connessioni
 nuove e stabilite per la vostra shell (ssh solitamente).
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
NAT - Network Address Translation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Come funziona?
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename disegno1.svg
	lyxscale 50
	width 80text%

\end_inset


\end_layout

\begin_layout Itemize

\size small
Quando un host, ad es.
 192.168.0.2 vuole connettersi ad un server esterno, ad es.
 5.6.7.8, invia i pacchetti al router di frontiera (gateway) che prende l'indirizzo
 sorgente e lo sostituisce con il proprio (1.2.3.4).
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\size small
Il router sostituisce la mia porta TCP sorgente con una sua porta libera
 e si annota questo scambio in una tabella di connessioni stabilite.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize

\size small
Quando arrivano le risposte dal server (solo risposte relative ad una connession
e già stabilita), il router capisce chi è il destinatario nella rete locale
 e sostiuisce l'indirizzo di destinazione (1.2.3.4) con l'indirizzo privato
 192.168.0.2 e con la porta destinazione corretta.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
NAT: un abominio
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
La NAT sarà tanto bella e comoda ma è un workaround (temporaneo fino ad
 IPv6).
 Quando è possibile non andrebbe usata.
 Specialmente bisognerebbe 
\series bold
evitare di fare doppie NAT
\series default
 o altre cose simili..
\end_layout

\begin_layout Itemize
NAT viola il modello gerarchico di IP
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
I processi su Internet non sono obbligati ad utilizzare TCP e UDP (vedi
 SCTP - RFC 2960)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Il numero di connessioni contemporanee diminuisce a causa del numero limitato
 di numeri di porte
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
NAPT trasforma Internet da una rete ad assenza di connessione
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
La NAT 
\series bold
da sola
\series default
 non è un meccanismo firewalling.
 Le caratteristiche 
\series bold
stateful
\series default
 del firewall che implementa la NAT proteggono, non la NAT stessa.
\end_layout

\begin_layout Standard
Approfondimenti su 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://tinyurl.com/nathorror
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
NAT: un abominio
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Se avete una valanga di IP pubblici o siete già dentro ad una NAT, evitate
 di farne “yet another one”, grazie.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Purtroppo molte volte c'è poco da fare (abbiamo solo un indirizzo IP pubblico
 e tanti host da collegare) e siamo costretti ad usarla.
 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Vediamo allora come fare...
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
NAT
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename disegno1.svg
	lyxscale 50
	width 80text%

\end_inset


\end_layout

\begin_layout LyX-Code

\size tiny
iptables -A FORWARD -s 192.168.0.0/24 -i eth1 -o eth0 -j ACCEPT
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code

\size tiny
iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED
 -j ACCEPT
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code

\size tiny
iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j SNAT --to-source
 1.2.3.4
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code

\size tiny
echo “1” > /proc/sys/net/ipv4/ip_forward
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
NAT
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Se il router ha un indirizzo IP dinamico potete utilizzare 
\series bold
-j MASQUERADE
\series default
 invece di SNAT, che identifica automaticamente l'indirizzo dell'interfaccia
 utilizzata per la route di default.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Come facciamo se vogliamo mettere su un servizio (ad.
 es.
 un server web) sull'host 192.168.0.3?
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename disegno1.svg
	lyxscale 50
	width 50text%

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
$ iptables -A FORWARD -i eth0 -o eth1 -p tcp --dport 80 -j ACCEPT
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
$ iptables -t nat -A PREROUTING -d 1.2.3.4 -i eth0 -j DNAT --to-destination
 192.168.0.3:80
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
IPv6
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Breve parentesi: Linux supporta nativamente Ipv6 fin dai primi standard.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Le assegnazioni di blocchi IPv4 da parte della IANA sono state esaurite
 nel 2011.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
In tutti i grandi datacenter internazionali IPv6 è già attivo e utilizzato.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
In netfilter ipv6 è già supportato.
 
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Per chiarezza il tool userspace per gestire le regole relative al traffico
 IPv6 è chiamato “ip6tables”.
\end_layout

\begin_deeper
\begin_layout Itemize
Funziona esattamente allo stesso modo di iptables normale.
 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
La principale differenza è che non esiste la NAT 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Una nota: Alcune funzionalità di ICMPv6 sono obbligatorie (Neighbor Discovery
 Protocol, type 135 e 136) e se le bloccate avrete problemi di connessione.
 
\end_layout

\begin_deeper
\begin_layout LyX-Code

\size scriptsize
ip6tables -A INPUT -p ipv6-icmp -j ACCEPT
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Rendere le regole persistenti
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Problema: Abbiamo tutte le nostre belle regole di iptables, però come facciamo
 a salvarle tra un riavvio e l'altro (al riavvio il sistema operativo cancella
 tutte le regole e ripristina tutte le chain vuote)
\end_layout

\begin_layout Itemize
iptables-save e iptables-restore fanno al caso nostro.
\end_layout

\begin_deeper
\begin_layout LyX-Code
iptables-save > /etc/firewall_rules
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
iptables-restore < /etc/firewall_rules
\end_layout

\end_deeper
\begin_layout Itemize
Possiamo aggiungere in /etc/rc.local o altri script di startup a seconda
 della distro.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Altri spunti
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Abbiamo solo grattato la superficie di netfilter! ;)
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename netfilter.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\end_deeper
\begin_layout Section*
Appendice
\end_layout

\begin_layout Subsection*
Fonti
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fonti
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Libro classico di Networking: Andrew S.
 Tanenbaum 
\emph on

\begin_inset Quotes eld
\end_inset

Reti di calcolatori
\begin_inset Quotes erd
\end_inset


\emph default
 IV edizione
\end_layout

\begin_layout Itemize
Miei appunti di Reti e Internet (non coprono tutti gli argomenti ma molto
 dettagliati): 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://otacon22.it/upload/reti.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Materiale su iptables:
\end_layout

\begin_deeper
\begin_layout Itemize
Un po' datato ma ben scritto: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.netfilter.org/documentation/HOWTO/it/packet-filtering-HOWTO.html
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Nuovo ma un po' confusionario: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.iptables.info/en/iptables-contents.html
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
O'Reilly - 
\begin_inset Quotes eld
\end_inset

Linux Networking cookbook
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://shop.oreilly.com/product/9780596102487.do
\end_layout

\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
È pieno di esempi di configurazione di vari programmi network-related, ma
 è un 
\begin_inset Quotes eld
\end_inset

cookbook
\begin_inset Quotes erd
\end_inset

.
 Non c'è una spiegazione dettagliata
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fonti
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Designing and Implementing Linux Firewalls and QoS using netfilter, iproute2,
 NAT and l7-filter
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
Utile per un po' di argomenti ma leggermente datato
\end_layout

\end_deeper
\begin_layout Itemize
Slides su firewalling su poul.org del 2012 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.poul.org/wp-content/uploads/2012/05/presentazione_netfilter.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Linux Advanced Routing & Traffic Control
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.lartc.org/
\end_layout

\end_inset

 : Un po' di dettagli avanzati sul routing e Quality of Service (non chiarissimo
 ma è l'unico manuale che lo spiega).
\end_layout

\begin_layout Itemize
Le manpages sono spesso noiose da leggere ma sono ben fatte.
\end_layout

\begin_layout Standard
Mandatemi una mail se non trovate quello che cercate ;)
\end_layout

\end_deeper
\begin_layout Subsection*
Licenza
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Ultima slide
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center

\size largest
Grazie per l'attenzione!
\begin_inset Newline newline
\end_inset


\size default

\begin_inset Note Note
status open

\begin_layout Plain Layout
Se volete cambiare licenza cambiate l'immagine e la scritta sotto
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename cc-by-sa.png
	height 0.9cm

\end_inset


\begin_inset Newline newline
\end_inset


\size footnotesize
Queste slides sono licenziate Creative Commons Attribution-ShareAlike 3.0
 Unported
\end_layout

\begin_layout Standard
\align center

\family typewriter
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.poul.org
\end_layout

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
